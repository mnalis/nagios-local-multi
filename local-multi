#!/usr/bin/perl -wT
# GPLv3+ Matija Nalis <mnalis-perl@axe.tomsoft.hr> started 2017-09-02
# checks multiple spool files for errors and reports them to nagios in order of severity

use strict;
use Getopt::Long qw (:config auto_version);

our $VERSION='1.07';	# FIXME: keep in sync with debian package version

my $DEBUG = 0;
my $CFG_FILE = '/etc/nagios/local-multi.conf';
my $SPOOL_DIR = '/var/spool/nagios-local-multi';

#$SPOOL_DIR='./testdata';		# FIXME DELME DEBUGONLY
#$CFG_FILE='./local-multi.conf';	# FIXME DELME DEBUGONLY

my @err_files = ();
my %R_OK = ();
my %R_CRITICAL = ();


# parse command line options
my $opt_help = 0;

my $result = GetOptions ( "help|h" => \$opt_help,
                          "file|f=s"   => \$CFG_FILE,
                          "debug=i"  => \$DEBUG,
                          );

if ($opt_help) {
    print <<EOF;
local-multi v$VERSION

This nagios check is intended to be run via NRPE on client computer

It will check /var/spool/nagios-local-multi/ for any visible non-zero-length files
containing any output not starting with "OK:", and report them as errors to nagios.

Options:
\t-h, --help
\t\tPrint this help screen
\t-f, --file
\t\tread config from file instead of $CFG_FILE
\t--debug
\t\tset debug level

EOF
    exit 3;
}

my $newest_timestamp = 0;

# sets up defaults for all error files in spool dir
sub enumerate_errfiles()
{
    opendir(my $dh, $SPOOL_DIR) or die "can't opendir $SPOOL_DIR: $!";
    @err_files = grep { /^[^.]/ && -f "$SPOOL_DIR/$_" } readdir($dh);
    closedir $dh;

    my $default_OK = '^(OK:|\s*#|\s*$)';
    my $default_CRITICAL = '(?i)critical|error|fatal';

    foreach my $err_file (@err_files) {		# setup default regexps
        $R_OK{$err_file} = qr/$default_OK/;
        $R_CRITICAL{$err_file} = qr/$default_CRITICAL/;
        my $mtime = (stat($SPOOL_DIR . '/' . $err_file))[9];	# find newest file timestamp 
        if ($mtime > $newest_timestamp) {
            $newest_timestamp = $mtime;
        }
    }
}

# reads config file and changes defaults for found error files
# lines are like:
#	OK:apt:^(OK:|#|\s*$)
#	CRITICAL:apt:(?i)critical|error|fatal

sub read_config_file()
{
    return unless -e $CFG_FILE;      # it's OK if config file is missing, assume default checks in that case
    open my $cfgfile, '<', $CFG_FILE  or die "can't read $CFG_FILE: $!";
    while (<$cfgfile>) {
        chomp;
        next if /^\s*(#.*)?$/;	# skip over comments and empty lines
        my ($status, $file, $regex) = split (/:/, $_, 3);
        if ($status eq 'OK') {
            $R_OK{$file} = qr/$regex/ if defined $R_OK{$file};
        } elsif ($status eq 'CRITICAL') {
            $R_CRITICAL{$file} = qr/$regex/ if defined $R_CRITICAL{$file};
        } else {
            die "cannot parse $CFG_FILE line $.: $_";
        }
    }
    close $cfgfile;
}


my @exit_cmd = ();
my @exit_value = ();
my @exit_code = ();
my @exit_txt = ();
my @exit_perf = ();

my @NAGIOS_EXIT=('OK', 'WARNING', 'CRITICAL', 'UNKNOWN');

# check if we have new maximum value
# note that it is more complicated than simple integer check, as UNKNOWN state is not worst!
#
# rating is (from better to worse): (0=OK, 3=UNKNOWN, 1=WARNING, 2=CRITICAL)
#
sub is_new_max
{
    my ($cur, $old) = @_;

    $DEBUG > 2 && print "check $old (old) <=> $cur (new)\n";
    die "invalid return value $old => $cur" if ($old > 3) or ($old < 0) or ($cur > 3) or ($cur < 0);

    if ($old == 0) { return 1 }			# if we were OK before, anything else is more important!
    if ($old == 2) { return 0 }			# if we were CRITICAL before, nothing else could be more important
    if ($old == 1) { return ($cur == 2) }	# if we were WARNING before, only CRITICAL is more important, others are not
    if ($old == 3) { return ($cur != 0) }	# if we were UNKNOWN before, only OK is less important
}


# reads all lines from error file, and returns the worst one!
sub handle_one_file($)
{
    my ($file) = @_;
    my $fh;
    if (!open $fh, '<', $SPOOL_DIR . '/' . $file) {
        $DEBUG > 0 && print "can't open $SPOOL_DIR/$file: $!, reporting error\n";
        push @exit_cmd, $file;
        push @exit_value, 2;
        push @exit_code, 'CRITICAL';
        push @exit_txt, "CRITICAL($file): can't open $SPOOL_DIR/$file: $!";
        push @exit_perf, '';
        return;
    };

    $DEBUG && print "--- opened $file\n";
    my $worst_line = undef;
    my $worst_level = -1;
    while (my $line = <$fh>) {
        chomp $line;
        $DEBUG > 2 && print "\tchecking $line\n";
        if ($line =~ /$R_CRITICAL{$file}/) {
                $worst_line = $line;
                $worst_level = 2;
                $DEBUG > 1 && print "\tmatched (2): $line\n";
                last;				# it never can be worse than CRITICAL, so shortcut
        }
        if ($worst_level == 1) { next }		# we already have matched first WARNING, not interested in another one (only in possible CRITICAL)

        if ($line !~ /$R_OK{$file}/) {		# it is not OK (and it is not CRITICAL) - so it must be WARNING
                $worst_line = $line;
                $worst_level = 1;
                $DEBUG > 1 && print "\tmatched (1): $line\n";
                next;
        }
        if ($worst_level == 0) { next }		# we already have matched first OK, not interested in another one (only in possible WARNING or CRITICAL)

        # so here we matched first R_OK
        $worst_line = $line;
        $worst_level = 0;
        $DEBUG > 1 && print "\tmatched (0): $line\n";
    }
    close $fh;

    if ($worst_level == -1) {
        $worst_level = 0;
        $worst_line = '';
    }
    $DEBUG > 0 && print "worst_line ($worst_level): $worst_line\n";

    $DEBUG > 2 && print "  for file=$file: \n";
    $DEBUG > 2 && print "\texit level:\t$NAGIOS_EXIT[$worst_level]\n";
#    print "\tfull=$worst_line, code=$?\n";
    my $_code = $NAGIOS_EXIT[$worst_level];
    my $_msg = "${_code}($file): $worst_line";
    my $_perf = '';
    $DEBUG > 2 && print "\tupdate msg:\t$_msg\n";

    push @exit_cmd, $file;
    push @exit_value, $worst_level;
    push @exit_code, $_code;
    push @exit_txt, $_msg;
    push @exit_perf, $_perf;
}

##############
#### MAIN ####
##############

enumerate_errfiles();
read_config_file();

if ($DEBUG > 2) {
    use Data::Dumper;
    print Dumper(\%R_OK);
    print Dumper(\%R_CRITICAL);
}


foreach my $err_file (@err_files) {
    handle_one_file ($err_file);
}

my $time_diff = time - $newest_timestamp;
if ($time_diff > 2*24*60*60) {	# if newest file is older than 2 days, then it is stale!
    push @exit_cmd, '*STALE*';
    push @exit_value, 1;
    push @exit_code, 'WARNING';
    push @exit_txt, "WARNING: all files older that $time_diff seconds";
    push @exit_perf, '';
}


if ($DEBUG > 0) {
  print "\n\n\n";
  print "commands =\n" . join ("\n", @exit_cmd) . "\n\n----------------------\n";
  print "values =\n" . join ("\n", @exit_value) . "\n\n----------------------\n";
  print "code =\n" . join ("\n", @exit_code) . "\n\n----------------------\n";
  print "txt =\n" . join ("\n", @exit_txt) . "\n\n----------------------\n";
  print "perf =\n" . join ("\n", @exit_perf) . "\n\n----------------------\n";
}


my $max_exit_level = 0;
my $output_code = '';
my $last_err = 'All checks OK.';
my $err_count = 0;
my $perf_data = '';
my $output_data = '';
my $x = 0;

# consolidate all checks (group by same cmd)
for $x (0 .. $#exit_cmd) {
    if ($exit_value[$x] > 0) { $err_count++; }
    if (is_new_max($exit_value[$x], $max_exit_level)) {	# final result is worst result we've had (0=OK, 3=UNKNOWN, 1=WARNING, 2=CRITICAL);
        $max_exit_level = $exit_value[$x];
        $output_code = $exit_code[$x];
        if ($exit_value[$x]) {	# in non-OK status (needed because is_new_max(0,0) will return TRUE)
            $last_err = "last ($x) is " . $exit_txt[$x];
            $last_err =~ s/\n/; /g;
            $DEBUG > 1 && print "\t$err_count error msgs, cur= " . $exit_txt[$x] . "\n";
        }
    }
    $DEBUG > 1 && print "x=$x, " . $exit_cmd[$x] . " = $exit_txt[$x] --- $exit_perf[$x]\n";
    $output_data .= "$exit_txt[$x]\n";	# always keep output msgs and perfdata in same order
    if ($exit_perf[$x]) {
      $perf_data .= "$exit_perf[$x]\n";
    } else {
      $perf_data .= "-\n";
    }
}
if ($max_exit_level) { $last_err = "err(s). $err_count non-OK msgs, " . $last_err; }

$DEBUG > 0 && print "\n---- FINAL RESULT ----\n";
$x = scalar @exit_cmd;	# NB perl annoyance: "for $x" is actually ALWAYS "for my $x"
print "$output_code $last_err|$err_count/$x total checks failed\n$output_data|$perf_data\n";
exit $max_exit_level;


